//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FoxSportsDataWrapper
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FoxTickEntities : DbContext
    {
        public FoxTickEntities()
            : base("name=FoxTickEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AlertPlaylist> AlertPlaylists { get; set; }
        public virtual DbSet<Alert> Alerts { get; set; }
        public virtual DbSet<auth_admin_log> auth_admin_log { get; set; }
        public virtual DbSet<auth_content_type> auth_content_type { get; set; }
        public virtual DbSet<Banner> Banners { get; set; }
        public virtual DbSet<BreakingNew> BreakingNews { get; set; }
        public virtual DbSet<BreakingNewsExpirationMode> BreakingNewsExpirationModes { get; set; }
        public virtual DbSet<BreakingNewsType> BreakingNewsTypes { get; set; }
        public virtual DbSet<ClientGame> ClientGames { get; set; }
        public virtual DbSet<ClientNetwork> ClientNetworks { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientSport> ClientSports { get; set; }
        public virtual DbSet<ClientStatus> ClientStatuses { get; set; }
        public virtual DbSet<ClientTeam> ClientTeams { get; set; }
        public virtual DbSet<Contributor> Contributors { get; set; }
        public virtual DbSet<ContributorType> ContributorTypes { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<EditorialStatsList> EditorialStatsLists { get; set; }
        public virtual DbSet<EditorialStatsListDetail> EditorialStatsListDetails { get; set; }
        public virtual DbSet<EntryType> EntryTypes { get; set; }
        public virtual DbSet<Episode> Episodes { get; set; }
        public virtual DbSet<GameHiveNote> GameHiveNotes { get; set; }
        public virtual DbSet<GameNote> GameNotes { get; set; }
        public virtual DbSet<GameOverride> GameOverrides { get; set; }
        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<GameStat> GameStats { get; set; }
        public virtual DbSet<GameStatus> GameStatuses { get; set; }
        public virtual DbSet<GameStatusType> GameStatusTypes { get; set; }
        public virtual DbSet<GroupAnimationType> GroupAnimationTypes { get; set; }
        public virtual DbSet<GroupGame> GroupGames { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<ImporterLog> ImporterLogs { get; set; }
        public virtual DbSet<Importer> Importers { get; set; }
        public virtual DbSet<LeaguesSetting> LeaguesSettings { get; set; }
        public virtual DbSet<LeaguesStanding> LeaguesStandings { get; set; }
        public virtual DbSet<ManagementGame> ManagementGames { get; set; }
        public virtual DbSet<Network> Networks { get; set; }
        public virtual DbSet<Network1> Networks1 { get; set; }
        public virtual DbSet<NewsAlert> NewsAlerts { get; set; }
        public virtual DbSet<nLog> nLogs { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<OnAirPlaylist> OnAirPlaylists { get; set; }
        public virtual DbSet<Player> Players { get; set; }
        public virtual DbSet<PlaylistClient> PlaylistClients { get; set; }
        public virtual DbSet<PlaylistDetail> PlaylistDetails { get; set; }
        public virtual DbSet<Playlist> Playlists { get; set; }
        public virtual DbSet<PlaylistType> PlaylistTypes { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SettingsOption> SettingsOptions { get; set; }
        public virtual DbSet<SharedAlert> SharedAlerts { get; set; }
        public virtual DbSet<Show> Shows { get; set; }
        public virtual DbSet<ShowContributor> ShowContributors { get; set; }
        public virtual DbSet<Sport> Sports { get; set; }
        public virtual DbSet<Standing> Standings { get; set; }
        public virtual DbSet<Status> Statuses { get; set; }
        public virtual DbSet<SuppressedGame> SuppressedGames { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TDProductionReport> TDProductionReports { get; set; }
        public virtual DbSet<TickerFlowFile> TickerFlowFiles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Ad> Ads { get; set; }
        public virtual DbSet<AlertsOrder> AlertsOrders { get; set; }
        public virtual DbSet<ClientAlert> ClientAlerts { get; set; }
        public virtual DbSet<ClientLog> ClientLogs { get; set; }
        public virtual DbSet<ClientNewsAlert> ClientNewsAlerts { get; set; }
        public virtual DbSet<DataSource> DataSources { get; set; }
        public virtual DbSet<ManagementGameNote> ManagementGameNotes { get; set; }
        public virtual DbSet<NFLGameNote> NFLGameNotes { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<vwGamesCFB> vwGamesCFBs { get; set; }
    
        public virtual int dt_addtosourcecontrol(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_addtosourcecontrol_u(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol_u", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_adduserobject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject");
        }
    
        public virtual int dt_adduserobject_vcs(string vchProperty)
        {
            var vchPropertyParameter = vchProperty != null ?
                new ObjectParameter("vchProperty", vchProperty) :
                new ObjectParameter("vchProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject_vcs", vchPropertyParameter);
        }
    
        public virtual int dt_checkinobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkinobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkoutobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_checkoutobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_displayoaerror(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_displayoaerror_u(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror_u", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_droppropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_droppropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual int dt_dropuserobjectbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_dropuserobjectbyid", idParameter);
        }
    
        public virtual int dt_generateansiname(ObjectParameter name)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_generateansiname", name);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop(string property, string value)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop", propertyParameter, valueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop_u(string property, string uvalue)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop_u", propertyParameter, uvalueParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_Result> dt_getpropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_Result>("dt_getpropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_u_Result> dt_getpropertiesbyid_u(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_u_Result>("dt_getpropertiesbyid_u", idParameter, propertyParameter);
        }
    
        public virtual int dt_getpropertiesbyid_vcs(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_getpropertiesbyid_vcs_u(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs_u", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_isundersourcecontrol(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_isundersourcecontrol_u(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol_u", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_removefromsourcecontrol()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_removefromsourcecontrol");
        }
    
        public virtual int dt_setpropertybyid(Nullable<int> id, string property, string value, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid", idParameter, propertyParameter, valueParameter, lvalueParameter);
        }
    
        public virtual int dt_setpropertybyid_u(Nullable<int> id, string property, string uvalue, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid_u", idParameter, propertyParameter, uvalueParameter, lvalueParameter);
        }
    
        public virtual int dt_validateloginparams(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_validateloginparams_u(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams_u", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_vcsenabled()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_vcsenabled");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp006()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp006");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp007()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp007");
        }
    
        public virtual int dt_whocheckedout(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_whocheckedout_u(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout_u", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_Playlists_Get_Result> sp_Playlists_Get(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Playlists_Get_Result>("sp_Playlists_Get", clientIdParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spTICK_Ads_Add(Nullable<int> clientID, string name, string filename)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("Filename", filename) :
                new ObjectParameter("Filename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Ads_Add", clientIDParameter, nameParameter, filenameParameter);
        }
    
        public virtual int spTICK_Ads_Delete(Nullable<int> clientID, string filename)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("Filename", filename) :
                new ObjectParameter("Filename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Ads_Delete", clientIDParameter, filenameParameter);
        }
    
        public virtual ObjectResult<spTICK_Ads_GetAdByClientID_Result> spTICK_Ads_GetAdByClientID(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Ads_GetAdByClientID_Result>("spTICK_Ads_GetAdByClientID", clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_AlertPlaylists_Get_Result> spTICK_AlertPlaylists_Get(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_AlertPlaylists_Get_Result>("spTICK_AlertPlaylists_Get", clientIDParameter);
        }
    
        public virtual int spTICK_Banner_Add(Nullable<int> clientID, string banner, Nullable<int> sortOrder, ObjectParameter bannerID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var bannerParameter = banner != null ?
                new ObjectParameter("Banner", banner) :
                new ObjectParameter("Banner", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Banner_Add", clientIDParameter, bannerParameter, sortOrderParameter, bannerID);
        }
    
        public virtual int spTICK_Banner_Delete(Nullable<int> bannerID)
        {
            var bannerIDParameter = bannerID.HasValue ?
                new ObjectParameter("BannerID", bannerID) :
                new ObjectParameter("BannerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Banner_Delete", bannerIDParameter);
        }
    
        public virtual int spTICK_Banner_Update(Nullable<int> bannerID, string bannerText)
        {
            var bannerIDParameter = bannerID.HasValue ?
                new ObjectParameter("BannerID", bannerID) :
                new ObjectParameter("BannerID", typeof(int));
    
            var bannerTextParameter = bannerText != null ?
                new ObjectParameter("BannerText", bannerText) :
                new ObjectParameter("BannerText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Banner_Update", bannerIDParameter, bannerTextParameter);
        }
    
        public virtual int spTICK_Banner_Update_SortOrder(Nullable<int> bannerID, Nullable<int> sortNumber)
        {
            var bannerIDParameter = bannerID.HasValue ?
                new ObjectParameter("BannerID", bannerID) :
                new ObjectParameter("BannerID", typeof(int));
    
            var sortNumberParameter = sortNumber.HasValue ?
                new ObjectParameter("SortNumber", sortNumber) :
                new ObjectParameter("SortNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Banner_Update_SortOrder", bannerIDParameter, sortNumberParameter);
        }
    
        public virtual ObjectResult<spTICK_Banners_Get_Result> spTICK_Banners_Get(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Banners_Get_Result>("spTICK_Banners_Get", clientIDParameter);
        }
    
        public virtual int spTICK_Client_AddLog(Nullable<int> clientID, string client, string entryType, string entry, string temperature)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var entryTypeParameter = entryType != null ?
                new ObjectParameter("EntryType", entryType) :
                new ObjectParameter("EntryType", typeof(string));
    
            var entryParameter = entry != null ?
                new ObjectParameter("Entry", entry) :
                new ObjectParameter("Entry", typeof(string));
    
            var temperatureParameter = temperature != null ?
                new ObjectParameter("Temperature", temperature) :
                new ObjectParameter("Temperature", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Client_AddLog", clientIDParameter, clientParameter, entryTypeParameter, entryParameter, temperatureParameter);
        }
    
        public virtual int spTICK_Client_Game_Update(Nullable<int> entryID, Nullable<int> clientID, Nullable<long> statsIncID, Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, Nullable<int> gameStatusID, string status, string clock, Nullable<System.DateTime> gameDateTime, Nullable<int> sortOrder, Nullable<bool> blockData)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var statsIncIDParameter = statsIncID.HasValue ?
                new ObjectParameter("StatsIncID", statsIncID) :
                new ObjectParameter("StatsIncID", typeof(long));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var blockDataParameter = blockData.HasValue ?
                new ObjectParameter("BlockData", blockData) :
                new ObjectParameter("BlockData", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Client_Game_Update", entryIDParameter, clientIDParameter, statsIncIDParameter, sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, gameStatusIDParameter, statusParameter, clockParameter, gameDateTimeParameter, sortOrderParameter, blockDataParameter);
        }
    
        public virtual ObjectResult<spTICK_Client_Get_Result> spTICK_Client_Get(Nullable<int> iDtoLookup)
        {
            var iDtoLookupParameter = iDtoLookup.HasValue ?
                new ObjectParameter("IDtoLookup", iDtoLookup) :
                new ObjectParameter("IDtoLookup", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Client_Get_Result>("spTICK_Client_Get", iDtoLookupParameter);
        }
    
        public virtual int spTICK_Client_SetLockBit(Nullable<int> clientID, Nullable<bool> lockBit)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var lockBitParameter = lockBit.HasValue ?
                new ObjectParameter("LockBit", lockBit) :
                new ObjectParameter("LockBit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Client_SetLockBit", clientIDParameter, lockBitParameter);
        }
    
        public virtual int spTICK_Client_Team_Update(Nullable<int> clientID, Nullable<int> iD, string abbreviation, string cityName, string nickName, Nullable<int> ranking, string primaryColor, string secondaryColor)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var rankingParameter = ranking.HasValue ?
                new ObjectParameter("Ranking", ranking) :
                new ObjectParameter("Ranking", typeof(int));
    
            var primaryColorParameter = primaryColor != null ?
                new ObjectParameter("PrimaryColor", primaryColor) :
                new ObjectParameter("PrimaryColor", typeof(string));
    
            var secondaryColorParameter = secondaryColor != null ?
                new ObjectParameter("SecondaryColor", secondaryColor) :
                new ObjectParameter("SecondaryColor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Client_Team_Update", clientIDParameter, iDParameter, abbreviationParameter, cityNameParameter, nickNameParameter, rankingParameter, primaryColorParameter, secondaryColorParameter);
        }
    
        public virtual int spTICK_ClientNetworks_Add(Nullable<int> gameID, Nullable<int> networkID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var networkIDParameter = networkID.HasValue ?
                new ObjectParameter("NetworkID", networkID) :
                new ObjectParameter("NetworkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ClientNetworks_Add", gameIDParameter, networkIDParameter);
        }
    
        public virtual int spTICK_ClientNetworks_Delete(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ClientNetworks_Delete", gameIDParameter);
        }
    
        public virtual int spTICK_ClientNetworks_Update(Nullable<int> gameID, Nullable<int> networkID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var networkIDParameter = networkID.HasValue ?
                new ObjectParameter("NetworkID", networkID) :
                new ObjectParameter("NetworkID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ClientNetworks_Update", gameIDParameter, networkIDParameter);
        }
    
        public virtual int spTICK_ClientStatuses_Add(Nullable<int> clientID, Nullable<int> statusesID, string altDesc)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var statusesIDParameter = statusesID.HasValue ?
                new ObjectParameter("StatusesID", statusesID) :
                new ObjectParameter("StatusesID", typeof(int));
    
            var altDescParameter = altDesc != null ?
                new ObjectParameter("AltDesc", altDesc) :
                new ObjectParameter("AltDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ClientStatuses_Add", clientIDParameter, statusesIDParameter, altDescParameter);
        }
    
        public virtual int spTICK_ClientStatuses_Delete(Nullable<int> clientID, Nullable<int> statusID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ClientStatuses_Delete", clientIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<spTICK_ClientStatuses_GetByID_Result> spTICK_ClientStatuses_GetByID(Nullable<int> clientID, Nullable<int> statusID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_ClientStatuses_GetByID_Result>("spTICK_ClientStatuses_GetByID", clientIDParameter, statusIDParameter);
        }
    
        public virtual int spTICK_ClientStatuses_Update(Nullable<int> clientID, Nullable<int> statusID, string altDesc)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var altDescParameter = altDesc != null ?
                new ObjectParameter("AltDesc", altDesc) :
                new ObjectParameter("AltDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ClientStatuses_Update", clientIDParameter, statusIDParameter, altDescParameter);
        }
    
        public virtual int spTICK_ClientTeams_Add(Nullable<int> clientID, Nullable<int> teamID, string altAbbrev, string altCity, string altNick)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var altAbbrevParameter = altAbbrev != null ?
                new ObjectParameter("AltAbbrev", altAbbrev) :
                new ObjectParameter("AltAbbrev", typeof(string));
    
            var altCityParameter = altCity != null ?
                new ObjectParameter("AltCity", altCity) :
                new ObjectParameter("AltCity", typeof(string));
    
            var altNickParameter = altNick != null ?
                new ObjectParameter("AltNick", altNick) :
                new ObjectParameter("AltNick", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ClientTeams_Add", clientIDParameter, teamIDParameter, altAbbrevParameter, altCityParameter, altNickParameter);
        }
    
        public virtual ObjectResult<spTICK_ClientTeams_Get_ByTeamID_Result> spTICK_ClientTeams_Get_ByTeamID(Nullable<int> teamID, Nullable<int> clientID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("teamID", teamID) :
                new ObjectParameter("teamID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_ClientTeams_Get_ByTeamID_Result>("spTICK_ClientTeams_Get_ByTeamID", teamIDParameter, clientIDParameter);
        }
    
        public virtual int spTICK_ClientTeams_Update(Nullable<int> clientID, Nullable<int> teamID, string altAbbreviation, string altCityName, string altNickName)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var altAbbreviationParameter = altAbbreviation != null ?
                new ObjectParameter("AltAbbreviation", altAbbreviation) :
                new ObjectParameter("AltAbbreviation", typeof(string));
    
            var altCityNameParameter = altCityName != null ?
                new ObjectParameter("AltCityName", altCityName) :
                new ObjectParameter("AltCityName", typeof(string));
    
            var altNickNameParameter = altNickName != null ?
                new ObjectParameter("AltNickName", altNickName) :
                new ObjectParameter("AltNickName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ClientTeams_Update", clientIDParameter, teamIDParameter, altAbbreviationParameter, altCityNameParameter, altNickNameParameter);
        }
    
        public virtual ObjectResult<spTICK_EntryTypes_Get_Result> spTICK_EntryTypes_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_EntryTypes_Get_Result>("spTICK_EntryTypes_Get");
        }
    
        public virtual int spTICK_Game_Create(Nullable<long> statsIncID, Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, Nullable<int> gameStatusID, Nullable<int> statusID, string clock, Nullable<System.DateTime> gameDateTime)
        {
            var statsIncIDParameter = statsIncID.HasValue ?
                new ObjectParameter("StatsIncID", statsIncID) :
                new ObjectParameter("StatsIncID", typeof(long));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Game_Create", statsIncIDParameter, sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, gameStatusIDParameter, statusIDParameter, clockParameter, gameDateTimeParameter);
        }
    
        public virtual int spTICK_Game_Delete(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Game_Delete", gameIDParameter);
        }
    
        public virtual int spTICK_Game_Note_Add(Nullable<int> gameID, Nullable<int> clientID, string note, string noteColor, Nullable<int> teamID, string header, Nullable<int> sortOrder, Nullable<bool> imported, ObjectParameter noteID, Nullable<int> userID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var noteColorParameter = noteColor != null ?
                new ObjectParameter("NoteColor", noteColor) :
                new ObjectParameter("NoteColor", typeof(string));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var importedParameter = imported.HasValue ?
                new ObjectParameter("Imported", imported) :
                new ObjectParameter("Imported", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Game_Note_Add", gameIDParameter, clientIDParameter, noteParameter, noteColorParameter, teamIDParameter, headerParameter, sortOrderParameter, importedParameter, noteID, userIDParameter);
        }
    
        public virtual int spTICK_Game_Note_Delete(Nullable<int> gameNoteID)
        {
            var gameNoteIDParameter = gameNoteID.HasValue ?
                new ObjectParameter("GameNoteID", gameNoteID) :
                new ObjectParameter("GameNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Game_Note_Delete", gameNoteIDParameter);
        }
    
        public virtual int spTICK_Game_Note_Update(Nullable<int> noteID, string note, Nullable<int> teamID, string header, Nullable<int> sortOrder)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Game_Note_Update", noteIDParameter, noteParameter, teamIDParameter, headerParameter, sortOrderParameter);
        }
    
        public virtual int spTICK_Game_Note_UpdateColor(Nullable<int> noteID, string noteColor, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var noteColorParameter = noteColor != null ?
                new ObjectParameter("NoteColor", noteColor) :
                new ObjectParameter("NoteColor", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Game_Note_UpdateColor", noteIDParameter, noteColorParameter, userIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Game_StatusTypes_Get_Result> spTICK_Game_StatusTypes_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Game_StatusTypes_Get_Result>("spTICK_Game_StatusTypes_Get");
        }
    
        public virtual int spTICK_Game_Update(Nullable<int> entryID, Nullable<long> statsIncID, Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, Nullable<int> gameStatusID, string status, string clock, Nullable<int> cSSID, Nullable<System.DateTime> gameDateTime, Nullable<int> sortOrder, Nullable<bool> blockData)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var statsIncIDParameter = statsIncID.HasValue ?
                new ObjectParameter("StatsIncID", statsIncID) :
                new ObjectParameter("StatsIncID", typeof(long));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var cSSIDParameter = cSSID.HasValue ?
                new ObjectParameter("CSSID", cSSID) :
                new ObjectParameter("CSSID", typeof(int));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var blockDataParameter = blockData.HasValue ?
                new ObjectParameter("BlockData", blockData) :
                new ObjectParameter("BlockData", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Game_Update", entryIDParameter, statsIncIDParameter, sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, gameStatusIDParameter, statusParameter, clockParameter, cSSIDParameter, gameDateTimeParameter, sortOrderParameter, blockDataParameter);
        }
    
        public virtual int spTICK_Game_Update_CSS(Nullable<int> entryID, Nullable<long> statsIncID, Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, Nullable<int> gameStatusID, string status, string clock, Nullable<int> cSSID, Nullable<System.DateTime> gameDateTime, Nullable<int> sortOrder, Nullable<bool> blockData)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var statsIncIDParameter = statsIncID.HasValue ?
                new ObjectParameter("StatsIncID", statsIncID) :
                new ObjectParameter("StatsIncID", typeof(long));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var cSSIDParameter = cSSID.HasValue ?
                new ObjectParameter("CSSID", cSSID) :
                new ObjectParameter("CSSID", typeof(int));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var blockDataParameter = blockData.HasValue ?
                new ObjectParameter("BlockData", blockData) :
                new ObjectParameter("BlockData", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Game_Update_CSS", entryIDParameter, statsIncIDParameter, sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, gameStatusIDParameter, statusParameter, clockParameter, cSSIDParameter, gameDateTimeParameter, sortOrderParameter, blockDataParameter);
        }
    
        public virtual int spTICK_GameNote_Resort(Nullable<int> noteID, Nullable<int> newSortOrder)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var newSortOrderParameter = newSortOrder.HasValue ?
                new ObjectParameter("NewSortOrder", newSortOrder) :
                new ObjectParameter("NewSortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_GameNote_Resort", noteIDParameter, newSortOrderParameter);
        }
    
        public virtual int spTICK_GameNote_Update_SortOrder(Nullable<int> gameNoteID, Nullable<int> gameID, Nullable<int> sortNumber, Nullable<int> userID)
        {
            var gameNoteIDParameter = gameNoteID.HasValue ?
                new ObjectParameter("GameNoteID", gameNoteID) :
                new ObjectParameter("GameNoteID", typeof(int));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var sortNumberParameter = sortNumber.HasValue ?
                new ObjectParameter("SortNumber", sortNumber) :
                new ObjectParameter("SortNumber", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_GameNote_Update_SortOrder", gameNoteIDParameter, gameIDParameter, sortNumberParameter, userIDParameter);
        }
    
        public virtual int spTICK_GameNotes_Delete(Nullable<int> gameID, Nullable<int> clientID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_GameNotes_Delete", gameIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_GameNotes_GetByGameID_Result> spTICK_GameNotes_GetByGameID(Nullable<int> gameID, Nullable<int> clientID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_GameNotes_GetByGameID_Result>("spTICK_GameNotes_GetByGameID", gameIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_GameNotes_GetByGameID_050212_Result> spTICK_GameNotes_GetByGameID_050212(Nullable<int> gameID, Nullable<int> clientID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_GameNotes_GetByGameID_050212_Result>("spTICK_GameNotes_GetByGameID_050212", gameIDParameter, clientIDParameter);
        }
    
        public virtual int spTICK_Games_Delete(Nullable<int> sportID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Games_Delete", sportIDParameter);
        }
    
        public virtual int spTICK_Games_DeleteOld()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Games_DeleteOld");
        }
    
        public virtual ObjectResult<spTICK_Games_Get_Result> spTICK_Games_Get(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_Result>("spTICK_Games_Get", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_0902_Result> spTICK_Games_Get_0902(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_0902_Result>("spTICK_Games_Get_0902", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_090712_Result> spTICK_Games_Get_090712(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_090712_Result>("spTICK_Games_Get_090712", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_1019_Result> spTICK_Games_Get_1019(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_1019_Result>("spTICK_Games_Get_1019", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_112811_Result> spTICK_Games_Get_112811(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_112811_Result>("spTICK_Games_Get_112811", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_Automation_Result> spTICK_Games_Get_Automation(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_Automation_Result>("spTICK_Games_Get_Automation", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_Automation_UNION_Result> spTICK_Games_Get_Automation_UNION(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_Automation_UNION_Result>("spTICK_Games_Get_Automation_UNION", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_Between_Result> spTICK_Games_Get_Between(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_Between_Result>("spTICK_Games_Get_Between", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_Between2_Result> spTICK_Games_Get_Between2(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_Between2_Result>("spTICK_Games_Get_Between2", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_BTN_090112_Result> spTICK_Games_Get_BTN_090112(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_BTN_090112_Result>("spTICK_Games_Get_BTN_090112", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_CSS_Result> spTICK_Games_Get_CSS(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_CSS_Result>("spTICK_Games_Get_CSS", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_Pre_Between_Result> spTICK_Games_Get_Pre_Between(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_Pre_Between_Result>("spTICK_Games_Get_Pre_Between", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_Soccer_Automation_Result> spTICK_Games_Get_Soccer_Automation(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_Soccer_Automation_Result>("spTICK_Games_Get_Soccer_Automation", clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_GetByEntryID_Result> spTICK_Games_GetByEntryID(Nullable<int> clientID, Nullable<int> entryID, Nullable<int> entryTypeID, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var entryTypeIDParameter = entryTypeID.HasValue ?
                new ObjectParameter("EntryTypeID", entryTypeID) :
                new ObjectParameter("EntryTypeID", typeof(int));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_GetByEntryID_Result>("spTICK_Games_GetByEntryID", clientIDParameter, entryIDParameter, entryTypeIDParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_GetByEntryID_1019_Result> spTICK_Games_GetByEntryID_1019(Nullable<int> clientID, Nullable<int> entryID, Nullable<int> entryTypeID, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var entryTypeIDParameter = entryTypeID.HasValue ?
                new ObjectParameter("EntryTypeID", entryTypeID) :
                new ObjectParameter("EntryTypeID", typeof(int));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_GetByEntryID_1019_Result>("spTICK_Games_GetByEntryID_1019", clientIDParameter, entryIDParameter, entryTypeIDParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_GetByEntryID_112811_Result> spTICK_Games_GetByEntryID_112811(Nullable<int> clientID, Nullable<int> entryID, Nullable<int> entryTypeID, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var entryTypeIDParameter = entryTypeID.HasValue ?
                new ObjectParameter("EntryTypeID", entryTypeID) :
                new ObjectParameter("EntryTypeID", typeof(int));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_GetByEntryID_112811_Result>("spTICK_Games_GetByEntryID_112811", clientIDParameter, entryIDParameter, entryTypeIDParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_GetScoreAlerts_Result> spTICK_Games_GetScoreAlerts(Nullable<int> clientID, Nullable<int> sportID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_GetScoreAlerts_Result>("spTICK_Games_GetScoreAlerts", clientIDParameter, sportIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Note_Get_Result> spTICK_Games_Note_Get(Nullable<int> noteID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Note_Get_Result>("spTICK_Games_Note_Get", noteIDParameter);
        }
    
        public virtual int spTICK_Games_ResetSortOrder(Nullable<int> clientID, Nullable<int> sportID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Games_ResetSortOrder", clientIDParameter, sportIDParameter);
        }
    
        public virtual int spTICK_Games_UpdateTeamIDandHeader(Nullable<int> gameID, Nullable<int> teamID, string header)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Games_UpdateTeamIDandHeader", gameIDParameter, teamIDParameter, headerParameter);
        }
    
        public virtual ObjectResult<spTICK_GameStats_Get_Home_Result> spTICK_GameStats_Get_Home(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_GameStats_Get_Home_Result>("spTICK_GameStats_Get_Home", gameIDParameter);
        }
    
        public virtual ObjectResult<spTICK_GameStats_Get_Visitors_Result> spTICK_GameStats_Get_Visitors(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_GameStats_Get_Visitors_Result>("spTICK_GameStats_Get_Visitors", gameIDParameter);
        }
    
        public virtual int spTICK_Group_Add(Nullable<int> clientID, string name, string type, string onAirName, Nullable<bool> editable, Nullable<int> teamID, string header, Nullable<int> groupAnimationTypeID, ObjectParameter groupID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var onAirNameParameter = onAirName != null ?
                new ObjectParameter("OnAirName", onAirName) :
                new ObjectParameter("OnAirName", typeof(string));
    
            var editableParameter = editable.HasValue ?
                new ObjectParameter("Editable", editable) :
                new ObjectParameter("Editable", typeof(bool));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var groupAnimationTypeIDParameter = groupAnimationTypeID.HasValue ?
                new ObjectParameter("GroupAnimationTypeID", groupAnimationTypeID) :
                new ObjectParameter("GroupAnimationTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_Add", clientIDParameter, nameParameter, typeParameter, onAirNameParameter, editableParameter, teamIDParameter, headerParameter, groupAnimationTypeIDParameter, groupID);
        }
    
        public virtual int spTICK_Group_Add_Animation(Nullable<int> groupID, string animationDescription)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var animationDescriptionParameter = animationDescription != null ?
                new ObjectParameter("AnimationDescription", animationDescription) :
                new ObjectParameter("AnimationDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_Add_Animation", groupIDParameter, animationDescriptionParameter);
        }
    
        public virtual int spTICK_Group_Add_ToPlaylistDetails(Nullable<int> playlistID, Nullable<int> groupID, Nullable<int> sortOrder)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_Add_ToPlaylistDetails", playlistIDParameter, groupIDParameter, sortOrderParameter);
        }
    
        public virtual int spTICK_Group_Delete(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_Delete", groupIDParameter);
        }
    
        public virtual int spTICK_Group_Delete_Animation(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_Delete_Animation", groupIDParameter);
        }
    
        public virtual int spTICK_Group_DeleteFromPlaylist(Nullable<int> playlistID, Nullable<int> playlistDetailsID, Nullable<int> entryID, Nullable<int> entryTypeID)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            var playlistDetailsIDParameter = playlistDetailsID.HasValue ?
                new ObjectParameter("PlaylistDetailsID", playlistDetailsID) :
                new ObjectParameter("PlaylistDetailsID", typeof(int));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var entryTypeIDParameter = entryTypeID.HasValue ?
                new ObjectParameter("EntryTypeID", entryTypeID) :
                new ObjectParameter("EntryTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_DeleteFromPlaylist", playlistIDParameter, playlistDetailsIDParameter, entryIDParameter, entryTypeIDParameter);
        }
    
        public virtual int spTICK_Group_DeleteNotes(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_DeleteNotes", groupIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Group_GetAllAnimations_Result> spTICK_Group_GetAllAnimations(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Group_GetAllAnimations_Result>("spTICK_Group_GetAllAnimations", groupIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Group_GetAllGroups_Result> spTICK_Group_GetAllGroups(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Group_GetAllGroups_Result>("spTICK_Group_GetAllGroups", clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Group_GetByType_Result> spTICK_Group_GetByType(Nullable<int> clientID, string type)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Group_GetByType_Result>("spTICK_Group_GetByType", clientIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<spTICK_Group_GetByType_032212_Result> spTICK_Group_GetByType_032212(Nullable<int> clientID, string type)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Group_GetByType_032212_Result>("spTICK_Group_GetByType_032212", clientIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<spTICK_Group_GetByType_090612_Result> spTICK_Group_GetByType_090612(Nullable<int> clientID, string type)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Group_GetByType_090612_Result>("spTICK_Group_GetByType_090612", clientIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<spTICK_Group_GetDetails_Result> spTICK_Group_GetDetails(Nullable<int> gid)
        {
            var gidParameter = gid.HasValue ?
                new ObjectParameter("Gid", gid) :
                new ObjectParameter("Gid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Group_GetDetails_Result>("spTICK_Group_GetDetails", gidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTICK_Group_GetGroupID(Nullable<int> clientID, string type, string name)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTICK_Group_GetGroupID", clientIDParameter, typeParameter, nameParameter);
        }
    
        public virtual ObjectResult<string> spTICK_Group_GetNotesNames(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTICK_Group_GetNotesNames", groupIDParameter);
        }
    
        public virtual int spTICK_Group_ReplaceInPlaylistDetails(Nullable<int> playlistID, Nullable<int> entryID, Nullable<int> newEntryID)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var newEntryIDParameter = newEntryID.HasValue ?
                new ObjectParameter("newEntryID", newEntryID) :
                new ObjectParameter("newEntryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_ReplaceInPlaylistDetails", playlistIDParameter, entryIDParameter, newEntryIDParameter);
        }
    
        public virtual int spTICK_Group_Update_Animation(Nullable<int> groupID, string description)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_Update_Animation", groupIDParameter, descriptionParameter);
        }
    
        public virtual int spTICK_Group_Update_AnimationType(Nullable<int> groupID, Nullable<int> groupAnimationTypeID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var groupAnimationTypeIDParameter = groupAnimationTypeID.HasValue ?
                new ObjectParameter("GroupAnimationTypeID", groupAnimationTypeID) :
                new ObjectParameter("GroupAnimationTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_Update_AnimationType", groupIDParameter, groupAnimationTypeIDParameter);
        }
    
        public virtual int spTICK_Group_Update_OnAirName(Nullable<int> clientID, Nullable<int> groupID, string onAirName)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var onAirNameParameter = onAirName != null ?
                new ObjectParameter("OnAirName", onAirName) :
                new ObjectParameter("OnAirName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_Update_OnAirName", clientIDParameter, groupIDParameter, onAirNameParameter);
        }
    
        public virtual int spTICK_Group_UpdateInMainGroup(Nullable<int> clientID, Nullable<int> groupID, string newName)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_UpdateInMainGroup", clientIDParameter, groupIDParameter, newNameParameter);
        }
    
        public virtual int spTICK_Group_UpdateTeamIDandHeader(Nullable<int> clientID, Nullable<int> groupID, Nullable<int> teamID, string header)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Group_UpdateTeamIDandHeader", clientIDParameter, groupIDParameter, teamIDParameter, headerParameter);
        }
    
        public virtual ObjectResult<spTICK_GroupAnimationTypes_Get_Result> spTICK_GroupAnimationTypes_Get(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_GroupAnimationTypes_Get_Result>("spTICK_GroupAnimationTypes_Get", clientIDParameter);
        }
    
        public virtual int spTICK_GroupType_DeleteNotes(Nullable<int> clientID, string groupType)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var groupTypeParameter = groupType != null ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_GroupType_DeleteNotes", clientIDParameter, groupTypeParameter);
        }
    
        public virtual ObjectResult<string> spTICK_GroupTypes_Get(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTICK_GroupTypes_Get", clientIDParameter);
        }
    
        public virtual int spTICK_Importer_AddLog(Nullable<int> importerID, string entryType, string entry)
        {
            var importerIDParameter = importerID.HasValue ?
                new ObjectParameter("ImporterID", importerID) :
                new ObjectParameter("ImporterID", typeof(int));
    
            var entryTypeParameter = entryType != null ?
                new ObjectParameter("EntryType", entryType) :
                new ObjectParameter("EntryType", typeof(string));
    
            var entryParameter = entry != null ?
                new ObjectParameter("Entry", entry) :
                new ObjectParameter("Entry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_AddLog", importerIDParameter, entryTypeParameter, entryParameter);
        }
    
        public virtual int spTICK_Importer_BoxScores_GameCompleted(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_BoxScores_GameCompleted", gameIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Importer_BoxScores_GamesGet_Result> spTICK_Importer_BoxScores_GamesGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Importer_BoxScores_GamesGet_Result>("spTICK_Importer_BoxScores_GamesGet");
        }
    
        public virtual ObjectResult<spTICK_Importer_CheckIfReady_Result> spTICK_Importer_CheckIfReady(Nullable<int> importerID)
        {
            var importerIDParameter = importerID.HasValue ?
                new ObjectParameter("ImporterID", importerID) :
                new ObjectParameter("ImporterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Importer_CheckIfReady_Result>("spTICK_Importer_CheckIfReady", importerIDParameter);
        }
    
        public virtual ObjectResult<string> spTICK_Importer_CheckLastFileDate(Nullable<int> importerID)
        {
            var importerIDParameter = importerID.HasValue ?
                new ObjectParameter("ImporterID", importerID) :
                new ObjectParameter("ImporterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTICK_Importer_CheckLastFileDate", importerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTICK_Importer_CompareScore(Nullable<int> gameID, Nullable<int> visitorsScore, Nullable<int> homeScore)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTICK_Importer_CompareScore", gameIDParameter, visitorsScoreParameter, homeScoreParameter);
        }
    
        public virtual int spTICK_Importer_DeleteGameNotes(Nullable<int> gameID, Nullable<int> clientID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_DeleteGameNotes", gameIDParameter, clientIDParameter);
        }
    
        public virtual int spTICK_Importer_DeleteGroupNotes(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_DeleteGroupNotes", groupIDParameter);
        }
    
        public virtual int spTICK_Importer_DeleteGroupNotes_ByGroupType(Nullable<int> clientID, string groupType)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var groupTypeParameter = groupType != null ?
                new ObjectParameter("GroupType", groupType) :
                new ObjectParameter("GroupType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_DeleteGroupNotes_ByGroupType", clientIDParameter, groupTypeParameter);
        }
    
        public virtual int spTICK_Importer_DeleteOldLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_DeleteOldLogs");
        }
    
        public virtual int spTICK_Importer_DeleteTweet(string tweet)
        {
            var tweetParameter = tweet != null ?
                new ObjectParameter("Tweet", tweet) :
                new ObjectParameter("Tweet", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_DeleteTweet", tweetParameter);
        }
    
        public virtual int spTICK_Importer_DeleteTweets(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_DeleteTweets", clientIDParameter);
        }
    
        public virtual int spTICK_Importer_GameClockUpdate(Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, string clock)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_GameClockUpdate", sportIDParameter, visitorsIDParameter, homeIDParameter, clockParameter);
        }
    
        public virtual int spTICK_Importer_GameCreate(Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, string clock, Nullable<int> gameStatusID, string status, Nullable<System.DateTime> gameDateTime, Nullable<int> sortOrder)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_GameCreate", sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, clockParameter, gameStatusIDParameter, statusParameter, gameDateTimeParameter, sortOrderParameter);
        }
    
        public virtual int spTICK_Importer_GameUpdate(Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, Nullable<int> gameStatusID, string status, string clock, string details, Nullable<System.DateTime> gameDateTime, Nullable<int> sortOrder)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_GameUpdate", sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, gameStatusIDParameter, statusParameter, clockParameter, detailsParameter, gameDateTimeParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<string> spTICK_Importer_GetClientAbbreviation(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTICK_Importer_GetClientAbbreviation", clientIDParameter);
        }
    
        public virtual ObjectResult<string> spTICK_Importer_GetClientSponsorSync(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTICK_Importer_GetClientSponsorSync", clientIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTICK_Importer_GetGroupID(Nullable<int> clientID, string type, string createdName)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var createdNameParameter = createdName != null ?
                new ObjectParameter("CreatedName", createdName) :
                new ObjectParameter("CreatedName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTICK_Importer_GetGroupID", clientIDParameter, typeParameter, createdNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTICK_Importer_GetImporterID(string importerName)
        {
            var importerNameParameter = importerName != null ?
                new ObjectParameter("ImporterName", importerName) :
                new ObjectParameter("ImporterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTICK_Importer_GetImporterID", importerNameParameter);
        }
    
        public virtual ObjectResult<spTICK_Importer_InGame_Games_Get_Result> spTICK_Importer_InGame_Games_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Importer_InGame_Games_Get_Result>("spTICK_Importer_InGame_Games_Get");
        }
    
        public virtual ObjectResult<spTICK_Importer_NFLGameNotes_GetGames_Result> spTICK_Importer_NFLGameNotes_GetGames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Importer_NFLGameNotes_GetGames_Result>("spTICK_Importer_NFLGameNotes_GetGames");
        }
    
        public virtual int spTICK_Importer_NFLLeaders_Interceptions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_NFLLeaders_Interceptions");
        }
    
        public virtual int spTICK_Importer_NFLLeaders_Kicking()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_NFLLeaders_Kicking");
        }
    
        public virtual int spTICK_Importer_NFLLeaders_Passing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_NFLLeaders_Passing");
        }
    
        public virtual int spTICK_Importer_NFLLeaders_Receiving()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_NFLLeaders_Receiving");
        }
    
        public virtual int spTICK_Importer_NFLLeaders_Rushing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_NFLLeaders_Rushing");
        }
    
        public virtual int spTICK_Importer_NFLLeaders_Sacks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_NFLLeaders_Sacks");
        }
    
        public virtual int spTICK_Importer_Player_Update(Nullable<int> iD, Nullable<int> statsIncID, Nullable<int> teamID, Nullable<int> statsIncTeamID, string firstName, string lastName, string position, string birthday, string weight, string height, string jersey, string country)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statsIncIDParameter = statsIncID.HasValue ?
                new ObjectParameter("StatsIncID", statsIncID) :
                new ObjectParameter("StatsIncID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var statsIncTeamIDParameter = statsIncTeamID.HasValue ?
                new ObjectParameter("StatsIncTeamID", statsIncTeamID) :
                new ObjectParameter("StatsIncTeamID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var birthdayParameter = birthday != null ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(string));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var heightParameter = height != null ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(string));
    
            var jerseyParameter = jersey != null ?
                new ObjectParameter("Jersey", jersey) :
                new ObjectParameter("Jersey", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_Player_Update", iDParameter, statsIncIDParameter, teamIDParameter, statsIncTeamIDParameter, firstNameParameter, lastNameParameter, positionParameter, birthdayParameter, weightParameter, heightParameter, jerseyParameter, countryParameter);
        }
    
        public virtual int spTICK_Importer_PlayerStat_Update(Nullable<int> gameID, Nullable<int> playerID, string statName, string statValue)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var playerIDParameter = playerID.HasValue ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(int));
    
            var statNameParameter = statName != null ?
                new ObjectParameter("StatName", statName) :
                new ObjectParameter("StatName", typeof(string));
    
            var statValueParameter = statValue != null ?
                new ObjectParameter("StatValue", statValue) :
                new ObjectParameter("StatValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_PlayerStat_Update", gameIDParameter, playerIDParameter, statNameParameter, statValueParameter);
        }
    
        public virtual int spTICK_Importer_PreGame_GameCompleted(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_PreGame_GameCompleted", gameIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Importer_PreGame_Games_Get_Result> spTICK_Importer_PreGame_Games_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Importer_PreGame_Games_Get_Result>("spTICK_Importer_PreGame_Games_Get");
        }
    
        public virtual int spTICK_Importer_Standings_Update(Nullable<int> teamID, string division, Nullable<int> games, Nullable<int> win, Nullable<int> loss, Nullable<int> tie, Nullable<int> position, Nullable<int> startPosition, Nullable<int> points, Nullable<int> scoresFor, Nullable<int> scoresAgainst, Nullable<int> roadWin, Nullable<int> roadLoss, Nullable<int> roadTie, Nullable<int> roadPosition, Nullable<int> roadPoints, Nullable<int> roadScoresFor, Nullable<int> roadScoresAgainst, Nullable<int> homeWin, Nullable<int> homeLoss, Nullable<int> homeTie, Nullable<int> homePosition, Nullable<int> homePoints, Nullable<int> homeScoresFor, Nullable<int> homeScoresAgainst)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var divisionParameter = division != null ?
                new ObjectParameter("Division", division) :
                new ObjectParameter("Division", typeof(string));
    
            var gamesParameter = games.HasValue ?
                new ObjectParameter("Games", games) :
                new ObjectParameter("Games", typeof(int));
    
            var winParameter = win.HasValue ?
                new ObjectParameter("Win", win) :
                new ObjectParameter("Win", typeof(int));
    
            var lossParameter = loss.HasValue ?
                new ObjectParameter("Loss", loss) :
                new ObjectParameter("Loss", typeof(int));
    
            var tieParameter = tie.HasValue ?
                new ObjectParameter("Tie", tie) :
                new ObjectParameter("Tie", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var startPositionParameter = startPosition.HasValue ?
                new ObjectParameter("StartPosition", startPosition) :
                new ObjectParameter("StartPosition", typeof(int));
    
            var pointsParameter = points.HasValue ?
                new ObjectParameter("Points", points) :
                new ObjectParameter("Points", typeof(int));
    
            var scoresForParameter = scoresFor.HasValue ?
                new ObjectParameter("ScoresFor", scoresFor) :
                new ObjectParameter("ScoresFor", typeof(int));
    
            var scoresAgainstParameter = scoresAgainst.HasValue ?
                new ObjectParameter("ScoresAgainst", scoresAgainst) :
                new ObjectParameter("ScoresAgainst", typeof(int));
    
            var roadWinParameter = roadWin.HasValue ?
                new ObjectParameter("RoadWin", roadWin) :
                new ObjectParameter("RoadWin", typeof(int));
    
            var roadLossParameter = roadLoss.HasValue ?
                new ObjectParameter("RoadLoss", roadLoss) :
                new ObjectParameter("RoadLoss", typeof(int));
    
            var roadTieParameter = roadTie.HasValue ?
                new ObjectParameter("RoadTie", roadTie) :
                new ObjectParameter("RoadTie", typeof(int));
    
            var roadPositionParameter = roadPosition.HasValue ?
                new ObjectParameter("RoadPosition", roadPosition) :
                new ObjectParameter("RoadPosition", typeof(int));
    
            var roadPointsParameter = roadPoints.HasValue ?
                new ObjectParameter("RoadPoints", roadPoints) :
                new ObjectParameter("RoadPoints", typeof(int));
    
            var roadScoresForParameter = roadScoresFor.HasValue ?
                new ObjectParameter("RoadScoresFor", roadScoresFor) :
                new ObjectParameter("RoadScoresFor", typeof(int));
    
            var roadScoresAgainstParameter = roadScoresAgainst.HasValue ?
                new ObjectParameter("RoadScoresAgainst", roadScoresAgainst) :
                new ObjectParameter("RoadScoresAgainst", typeof(int));
    
            var homeWinParameter = homeWin.HasValue ?
                new ObjectParameter("HomeWin", homeWin) :
                new ObjectParameter("HomeWin", typeof(int));
    
            var homeLossParameter = homeLoss.HasValue ?
                new ObjectParameter("HomeLoss", homeLoss) :
                new ObjectParameter("HomeLoss", typeof(int));
    
            var homeTieParameter = homeTie.HasValue ?
                new ObjectParameter("HomeTie", homeTie) :
                new ObjectParameter("HomeTie", typeof(int));
    
            var homePositionParameter = homePosition.HasValue ?
                new ObjectParameter("HomePosition", homePosition) :
                new ObjectParameter("HomePosition", typeof(int));
    
            var homePointsParameter = homePoints.HasValue ?
                new ObjectParameter("HomePoints", homePoints) :
                new ObjectParameter("HomePoints", typeof(int));
    
            var homeScoresForParameter = homeScoresFor.HasValue ?
                new ObjectParameter("HomeScoresFor", homeScoresFor) :
                new ObjectParameter("HomeScoresFor", typeof(int));
    
            var homeScoresAgainstParameter = homeScoresAgainst.HasValue ?
                new ObjectParameter("HomeScoresAgainst", homeScoresAgainst) :
                new ObjectParameter("HomeScoresAgainst", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_Standings_Update", teamIDParameter, divisionParameter, gamesParameter, winParameter, lossParameter, tieParameter, positionParameter, startPositionParameter, pointsParameter, scoresForParameter, scoresAgainstParameter, roadWinParameter, roadLossParameter, roadTieParameter, roadPositionParameter, roadPointsParameter, roadScoresForParameter, roadScoresAgainstParameter, homeWinParameter, homeLossParameter, homeTieParameter, homePositionParameter, homePointsParameter, homeScoresForParameter, homeScoresAgainstParameter);
        }
    
        public virtual ObjectResult<spTICK_Importer_TeamGet_Result> spTICK_Importer_TeamGet(Nullable<int> sportID, string abbreviation)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Importer_TeamGet_Result>("spTICK_Importer_TeamGet", sportIDParameter, abbreviationParameter);
        }
    
        public virtual ObjectResult<spTICK_Importer_TeamGetByNickName_Result> spTICK_Importer_TeamGetByNickName(Nullable<int> sportID, string nickName)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Importer_TeamGetByNickName_Result>("spTICK_Importer_TeamGetByNickName", sportIDParameter, nickNameParameter);
        }
    
        public virtual int spTICK_Importer_TeamUpdate(Nullable<int> teamID, Nullable<int> wins, Nullable<int> losses, Nullable<int> ties)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var winsParameter = wins.HasValue ?
                new ObjectParameter("Wins", wins) :
                new ObjectParameter("Wins", typeof(int));
    
            var lossesParameter = losses.HasValue ?
                new ObjectParameter("Losses", losses) :
                new ObjectParameter("Losses", typeof(int));
    
            var tiesParameter = ties.HasValue ?
                new ObjectParameter("Ties", ties) :
                new ObjectParameter("Ties", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_TeamUpdate", teamIDParameter, winsParameter, lossesParameter, tiesParameter);
        }
    
        public virtual int spTICK_Importer_Update_LastRun(Nullable<int> importerID, Nullable<bool> lastSuccess, string lastMessage, string lastFileDate)
        {
            var importerIDParameter = importerID.HasValue ?
                new ObjectParameter("ImporterID", importerID) :
                new ObjectParameter("ImporterID", typeof(int));
    
            var lastSuccessParameter = lastSuccess.HasValue ?
                new ObjectParameter("LastSuccess", lastSuccess) :
                new ObjectParameter("LastSuccess", typeof(bool));
    
            var lastMessageParameter = lastMessage != null ?
                new ObjectParameter("LastMessage", lastMessage) :
                new ObjectParameter("LastMessage", typeof(string));
    
            var lastFileDateParameter = lastFileDate != null ?
                new ObjectParameter("LastFileDate", lastFileDate) :
                new ObjectParameter("LastFileDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_Update_LastRun", importerIDParameter, lastSuccessParameter, lastMessageParameter, lastFileDateParameter);
        }
    
        public virtual ObjectResult<spTICK_Networks_Get_Result> spTICK_Networks_Get(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Networks_Get_Result>("spTICK_Networks_Get", clientIDParameter);
        }
    
        public virtual int spTICK_NewsAlert_Add(Nullable<int> clientID, string onAirName, string header, string alert, Nullable<int> playCount, string createdIP, Nullable<bool> active, ObjectParameter alertID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var onAirNameParameter = onAirName != null ?
                new ObjectParameter("OnAirName", onAirName) :
                new ObjectParameter("OnAirName", typeof(string));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var alertParameter = alert != null ?
                new ObjectParameter("Alert", alert) :
                new ObjectParameter("Alert", typeof(string));
    
            var playCountParameter = playCount.HasValue ?
                new ObjectParameter("PlayCount", playCount) :
                new ObjectParameter("PlayCount", typeof(int));
    
            var createdIPParameter = createdIP != null ?
                new ObjectParameter("CreatedIP", createdIP) :
                new ObjectParameter("CreatedIP", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_NewsAlert_Add", clientIDParameter, onAirNameParameter, headerParameter, alertParameter, playCountParameter, createdIPParameter, activeParameter, alertID);
        }
    
        public virtual int spTICK_NewsAlert_Delete(Nullable<int> alertID)
        {
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("AlertID", alertID) :
                new ObjectParameter("AlertID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_NewsAlert_Delete", alertIDParameter);
        }
    
        public virtual int spTICK_NewsAlert_SetClientComplete(Nullable<int> alertID, string clientIP)
        {
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("AlertID", alertID) :
                new ObjectParameter("AlertID", typeof(int));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("ClientIP", clientIP) :
                new ObjectParameter("ClientIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_NewsAlert_SetClientComplete", alertIDParameter, clientIPParameter);
        }
    
        public virtual int spTICK_NewsAlert_Update(Nullable<int> clientID, Nullable<int> alertID, string onAirName, string header, string alert, Nullable<int> playCount, Nullable<bool> active)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("AlertID", alertID) :
                new ObjectParameter("AlertID", typeof(int));
    
            var onAirNameParameter = onAirName != null ?
                new ObjectParameter("OnAirName", onAirName) :
                new ObjectParameter("OnAirName", typeof(string));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var alertParameter = alert != null ?
                new ObjectParameter("Alert", alert) :
                new ObjectParameter("Alert", typeof(string));
    
            var playCountParameter = playCount.HasValue ?
                new ObjectParameter("PlayCount", playCount) :
                new ObjectParameter("PlayCount", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_NewsAlert_Update", clientIDParameter, alertIDParameter, onAirNameParameter, headerParameter, alertParameter, playCountParameter, activeParameter);
        }
    
        public virtual ObjectResult<spTICK_NewsAlerts_Get_Result> spTICK_NewsAlerts_Get(Nullable<int> clientID, string clientIP)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("ClientIP", clientIP) :
                new ObjectParameter("ClientIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_NewsAlerts_Get_Result>("spTICK_NewsAlerts_Get", clientIDParameter, clientIPParameter);
        }
    
        public virtual int spTICK_NFLGameNotes_Add(string type, Nullable<int> gameID, Nullable<int> playerID, string note)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var playerIDParameter = playerID.HasValue ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_NFLGameNotes_Add", typeParameter, gameIDParameter, playerIDParameter, noteParameter);
        }
    
        public virtual int spTICK_NFLGameNotes_Delete()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_NFLGameNotes_Delete");
        }
    
        public virtual int spTICK_NFLGameNotes_DeleteFromGame(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_NFLGameNotes_DeleteFromGame", gameIDParameter);
        }
    
        public virtual ObjectResult<spTICK_NFLGameNotes_Get_Result> spTICK_NFLGameNotes_Get(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_NFLGameNotes_Get_Result>("spTICK_NFLGameNotes_Get", gameIDParameter);
        }
    
        public virtual int spTICK_Note_Add(Nullable<int> groupID, string note, string noteColor, Nullable<int> teamID, string header, Nullable<int> sortOrder, Nullable<bool> imported, ObjectParameter noteID, Nullable<int> userID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var noteColorParameter = noteColor != null ?
                new ObjectParameter("NoteColor", noteColor) :
                new ObjectParameter("NoteColor", typeof(string));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var importedParameter = imported.HasValue ?
                new ObjectParameter("Imported", imported) :
                new ObjectParameter("Imported", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Note_Add", groupIDParameter, noteParameter, noteColorParameter, teamIDParameter, headerParameter, sortOrderParameter, importedParameter, noteID, userIDParameter);
        }
    
        public virtual int spTICK_Note_Delete(Nullable<int> noteID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Note_Delete", noteIDParameter);
        }
    
        public virtual int spTICK_Note_DeleteByNote(Nullable<int> groupID, string note)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Note_DeleteByNote", groupIDParameter, noteParameter);
        }
    
        public virtual ObjectResult<spTICK_Note_Get_Result> spTICK_Note_Get(Nullable<int> noteID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Note_Get_Result>("spTICK_Note_Get", noteIDParameter);
        }
    
        public virtual ObjectResult<string> spTICK_Note_GetColor(Nullable<int> noteID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTICK_Note_GetColor", noteIDParameter);
        }
    
        public virtual int spTICK_Note_Resort(Nullable<int> noteID, Nullable<int> newSortOrder)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var newSortOrderParameter = newSortOrder.HasValue ?
                new ObjectParameter("NewSortOrder", newSortOrder) :
                new ObjectParameter("NewSortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Note_Resort", noteIDParameter, newSortOrderParameter);
        }
    
        public virtual int spTICK_Note_Update(Nullable<int> noteID, string note, string noteColor, Nullable<int> teamID, string header, Nullable<int> sortOrder)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var noteColorParameter = noteColor != null ?
                new ObjectParameter("NoteColor", noteColor) :
                new ObjectParameter("NoteColor", typeof(string));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var headerParameter = header != null ?
                new ObjectParameter("Header", header) :
                new ObjectParameter("Header", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Note_Update", noteIDParameter, noteParameter, noteColorParameter, teamIDParameter, headerParameter, sortOrderParameter);
        }
    
        public virtual int spTICK_Note_Update_SortOrder(Nullable<int> noteID, Nullable<int> groupID, Nullable<int> sortNumber, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var sortNumberParameter = sortNumber.HasValue ?
                new ObjectParameter("SortNumber", sortNumber) :
                new ObjectParameter("SortNumber", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Note_Update_SortOrder", noteIDParameter, groupIDParameter, sortNumberParameter, userIDParameter);
        }
    
        public virtual int spTICK_Note_UpdateColor(Nullable<int> noteID, string noteColor, Nullable<int> userID)
        {
            var noteIDParameter = noteID.HasValue ?
                new ObjectParameter("NoteID", noteID) :
                new ObjectParameter("NoteID", typeof(int));
    
            var noteColorParameter = noteColor != null ?
                new ObjectParameter("NoteColor", noteColor) :
                new ObjectParameter("NoteColor", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Note_UpdateColor", noteIDParameter, noteColorParameter, userIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Notes_GetByGroup_Result> spTICK_Notes_GetByGroup(Nullable<int> groupID, Nullable<int> clientID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Notes_GetByGroup_Result>("spTICK_Notes_GetByGroup", groupIDParameter, clientIDParameter);
        }
    
        public virtual int spTICK_Playlist_Add(Nullable<int> clientID, string name, ObjectParameter playlistID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_Add", clientIDParameter, nameParameter, playlistID);
        }
    
        public virtual int spTICK_Playlist_AddEntry(Nullable<int> playlistID, Nullable<byte> entryTypeID, Nullable<int> entryID, Nullable<int> sortOrder)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            var entryTypeIDParameter = entryTypeID.HasValue ?
                new ObjectParameter("EntryTypeID", entryTypeID) :
                new ObjectParameter("EntryTypeID", typeof(byte));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_AddEntry", playlistIDParameter, entryTypeIDParameter, entryIDParameter, sortOrderParameter);
        }
    
        public virtual int spTICK_Playlist_Delete(Nullable<int> clientD, string name)
        {
            var clientDParameter = clientD.HasValue ?
                new ObjectParameter("ClientD", clientD) :
                new ObjectParameter("ClientD", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_Delete", clientDParameter, nameParameter);
        }
    
        public virtual int spTICK_Playlist_DeleteByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_DeleteByID", iDParameter);
        }
    
        public virtual int spTICK_Playlist_Details_ClearSortOrder(Nullable<int> playlistID)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_Details_ClearSortOrder", playlistIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Playlist_Details_Get_Result> spTICK_Playlist_Details_Get(Nullable<int> playlistID)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Playlist_Details_Get_Result>("spTICK_Playlist_Details_Get", playlistIDParameter);
        }
    
        public virtual int spTICK_Playlist_Details_Set_SortOrder(Nullable<int> playlistDetailsID, Nullable<int> playlistID, Nullable<int> entryID, Nullable<int> sortNumber)
        {
            var playlistDetailsIDParameter = playlistDetailsID.HasValue ?
                new ObjectParameter("PlaylistDetailsID", playlistDetailsID) :
                new ObjectParameter("PlaylistDetailsID", typeof(int));
    
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var sortNumberParameter = sortNumber.HasValue ?
                new ObjectParameter("SortNumber", sortNumber) :
                new ObjectParameter("SortNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_Details_Set_SortOrder", playlistDetailsIDParameter, playlistIDParameter, entryIDParameter, sortNumberParameter);
        }
    
        public virtual int spTICK_Playlist_Details_Update_OnAirName(Nullable<int> playlistDetailsID, string onAirName)
        {
            var playlistDetailsIDParameter = playlistDetailsID.HasValue ?
                new ObjectParameter("PlaylistDetailsID", playlistDetailsID) :
                new ObjectParameter("PlaylistDetailsID", typeof(int));
    
            var onAirNameParameter = onAirName != null ?
                new ObjectParameter("OnAirName", onAirName) :
                new ObjectParameter("OnAirName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_Details_Update_OnAirName", playlistDetailsIDParameter, onAirNameParameter);
        }
    
        public virtual int spTICK_Playlist_SetLockBit(Nullable<int> playlistID, Nullable<bool> lockBit)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            var lockBitParameter = lockBit.HasValue ?
                new ObjectParameter("LockBit", lockBit) :
                new ObjectParameter("LockBit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_SetLockBit", playlistIDParameter, lockBitParameter);
        }
    
        public virtual int spTICK_Playlist_Stage(Nullable<int> clientID, Nullable<int> playlistID, Nullable<bool> stageFlag)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            var stageFlagParameter = stageFlag.HasValue ?
                new ObjectParameter("StageFlag", stageFlag) :
                new ObjectParameter("StageFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_Stage", clientIDParameter, playlistIDParameter, stageFlagParameter);
        }
    
        public virtual int spTICK_Playlist_UpdateName(Nullable<int> clientID, string oldName, string newName)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var oldNameParameter = oldName != null ?
                new ObjectParameter("oldName", oldName) :
                new ObjectParameter("oldName", typeof(string));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_UpdateName", clientIDParameter, oldNameParameter, newNameParameter);
        }
    
        public virtual int spTICK_PlaylistDetail_Resort(Nullable<int> playlistDetailID, Nullable<int> newSortOrder)
        {
            var playlistDetailIDParameter = playlistDetailID.HasValue ?
                new ObjectParameter("PlaylistDetailID", playlistDetailID) :
                new ObjectParameter("PlaylistDetailID", typeof(int));
    
            var newSortOrderParameter = newSortOrder.HasValue ?
                new ObjectParameter("NewSortOrder", newSortOrder) :
                new ObjectParameter("NewSortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_PlaylistDetail_Resort", playlistDetailIDParameter, newSortOrderParameter);
        }
    
        public virtual ObjectResult<spTICK_Playlists_Get_Result> spTICK_Playlists_Get(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Playlists_Get_Result>("spTICK_Playlists_Get", clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Playlists_Get_StagedID_ByClientID_Result> spTICK_Playlists_Get_StagedID_ByClientID(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Playlists_Get_StagedID_ByClientID_Result>("spTICK_Playlists_Get_StagedID_ByClientID", clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Rosters_Soccer_Get_Automation_Result> spTICK_Rosters_Soccer_Get_Automation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Rosters_Soccer_Get_Automation_Result>("spTICK_Rosters_Soccer_Get_Automation");
        }
    
        public virtual int spTICK_ScoreAlert_Delete(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ScoreAlert_Delete", gameIDParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> spTICK_ScoreAlert_Get(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("spTICK_ScoreAlert_Get", gameIDParameter);
        }
    
        public virtual int spTICK_ScoreAlert_SetClientComplete(Nullable<int> clientID, Nullable<int> gameID, string clientIP)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("ClientIP", clientIP) :
                new ObjectParameter("ClientIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ScoreAlert_SetClientComplete", clientIDParameter, gameIDParameter, clientIPParameter);
        }
    
        public virtual int spTICK_ScoreAlert_Update(Nullable<int> gameID, Nullable<int> alertID, Nullable<System.DateTime> alertTimeStamp, string alert)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var alertIDParameter = alertID.HasValue ?
                new ObjectParameter("AlertID", alertID) :
                new ObjectParameter("AlertID", typeof(int));
    
            var alertTimeStampParameter = alertTimeStamp.HasValue ?
                new ObjectParameter("AlertTimeStamp", alertTimeStamp) :
                new ObjectParameter("AlertTimeStamp", typeof(System.DateTime));
    
            var alertParameter = alert != null ?
                new ObjectParameter("Alert", alert) :
                new ObjectParameter("Alert", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ScoreAlert_Update", gameIDParameter, alertIDParameter, alertTimeStampParameter, alertParameter);
        }
    
        public virtual int spTICK_ScoreAlert_UpdateDescription(Nullable<int> gameID, Nullable<int> visitorsScore, Nullable<int> homeScore, string scoreDescription, string scoreDescriptionAlt)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var scoreDescriptionParameter = scoreDescription != null ?
                new ObjectParameter("ScoreDescription", scoreDescription) :
                new ObjectParameter("ScoreDescription", typeof(string));
    
            var scoreDescriptionAltParameter = scoreDescriptionAlt != null ?
                new ObjectParameter("ScoreDescriptionAlt", scoreDescriptionAlt) :
                new ObjectParameter("ScoreDescriptionAlt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ScoreAlert_UpdateDescription", gameIDParameter, visitorsScoreParameter, homeScoreParameter, scoreDescriptionParameter, scoreDescriptionAltParameter);
        }
    
        public virtual ObjectResult<spTICK_ScoreAlerts_All_Result> spTICK_ScoreAlerts_All(Nullable<int> sportID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_ScoreAlerts_All_Result>("spTICK_ScoreAlerts_All", sportIDParameter);
        }
    
        public virtual int spTICK_ScoreAlerts_GameDisable(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ScoreAlerts_GameDisable", gameIDParameter);
        }
    
        public virtual int spTICK_ScoreAlerts_GameEnable(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ScoreAlerts_GameEnable", gameIDParameter);
        }
    
        public virtual ObjectResult<spTICK_ScoreAlerts_Get_Result> spTICK_ScoreAlerts_Get(Nullable<int> clientID, Nullable<int> sportID, string clientIP)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("ClientIP", clientIP) :
                new ObjectParameter("ClientIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_ScoreAlerts_Get_Result>("spTICK_ScoreAlerts_Get", clientIDParameter, sportIDParameter, clientIPParameter);
        }
    
        public virtual ObjectResult<spTICK_ScoreAlerts_Get_FTL_Result> spTICK_ScoreAlerts_Get_FTL(Nullable<int> clientID, Nullable<int> sportID, string clientIP)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("ClientIP", clientIP) :
                new ObjectParameter("ClientIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_ScoreAlerts_Get_FTL_Result>("spTICK_ScoreAlerts_Get_FTL", clientIDParameter, sportIDParameter, clientIPParameter);
        }
    
        public virtual int spTICK_ScoreAlerts_ScorePAT(Nullable<int> gameID, string team)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var teamParameter = team != null ?
                new ObjectParameter("Team", team) :
                new ObjectParameter("Team", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ScoreAlerts_ScorePAT", gameIDParameter, teamParameter);
        }
    
        public virtual int spTICK_Sport_Delete(Nullable<int> sportID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Sport_Delete", sportIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Sport_Get_Result> spTICK_Sport_Get(Nullable<int> sportID, Nullable<int> clientID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Sport_Get_Result>("spTICK_Sport_Get", sportIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Sports_Get_Result> spTICK_Sports_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Sports_Get_Result>("spTICK_Sports_Get");
        }
    
        public virtual ObjectResult<spTICK_Sports_Get_Automation_Result> spTICK_Sports_Get_Automation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Sports_Get_Automation_Result>("spTICK_Sports_Get_Automation");
        }
    
        public virtual ObjectResult<spTICK_Sports_GetID_ByName_Result> spTICK_Sports_GetID_ByName(string sportShortDisplay)
        {
            var sportShortDisplayParameter = sportShortDisplay != null ?
                new ObjectParameter("SportShortDisplay", sportShortDisplay) :
                new ObjectParameter("SportShortDisplay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Sports_GetID_ByName_Result>("spTICK_Sports_GetID_ByName", sportShortDisplayParameter);
        }
    
        public virtual ObjectResult<spTICK_Standings_Soccer_Get_Automation_Result> spTICK_Standings_Soccer_Get_Automation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Standings_Soccer_Get_Automation_Result>("spTICK_Standings_Soccer_Get_Automation");
        }
    
        public virtual int spTICK_StatsInc_GameUpdate(Nullable<long> statsIncID, Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, Nullable<int> gameStatusID, string status, string clock, string details, Nullable<System.DateTime> gameDateTime)
        {
            var statsIncIDParameter = statsIncID.HasValue ?
                new ObjectParameter("StatsIncID", statsIncID) :
                new ObjectParameter("StatsIncID", typeof(long));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_StatsInc_GameUpdate", statsIncIDParameter, sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, gameStatusIDParameter, statusParameter, clockParameter, detailsParameter, gameDateTimeParameter);
        }
    
        public virtual int spTICK_StatsInc_GameUpdate_100611(Nullable<long> statsIncID, Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, Nullable<int> gameStatusID, string status, string clock, string details, Nullable<System.DateTime> gameDateTime)
        {
            var statsIncIDParameter = statsIncID.HasValue ?
                new ObjectParameter("StatsIncID", statsIncID) :
                new ObjectParameter("StatsIncID", typeof(long));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_StatsInc_GameUpdate_100611", statsIncIDParameter, sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, gameStatusIDParameter, statusParameter, clockParameter, detailsParameter, gameDateTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTICK_StatsInc_GetGame_ByStatsIncID(Nullable<int> sportID, Nullable<long> statsIncGameID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var statsIncGameIDParameter = statsIncGameID.HasValue ?
                new ObjectParameter("StatsIncGameID", statsIncGameID) :
                new ObjectParameter("StatsIncGameID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTICK_StatsInc_GetGame_ByStatsIncID", sportIDParameter, statsIncGameIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTICK_StatsInc_GetPlayer_ByStatsIncID(Nullable<int> sportID, Nullable<int> statsIncPlayerID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var statsIncPlayerIDParameter = statsIncPlayerID.HasValue ?
                new ObjectParameter("StatsIncPlayerID", statsIncPlayerID) :
                new ObjectParameter("StatsIncPlayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTICK_StatsInc_GetPlayer_ByStatsIncID", sportIDParameter, statsIncPlayerIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTICK_StatsInc_GetTeam(Nullable<int> sportID, Nullable<long> statsIncTeamID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var statsIncTeamIDParameter = statsIncTeamID.HasValue ?
                new ObjectParameter("StatsIncTeamID", statsIncTeamID) :
                new ObjectParameter("StatsIncTeamID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTICK_StatsInc_GetTeam", sportIDParameter, statsIncTeamIDParameter);
        }
    
        public virtual ObjectResult<spTICK_StatsInc_GetTeam_ByID_Result> spTICK_StatsInc_GetTeam_ByID(Nullable<int> iD, Nullable<int> clientID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_StatsInc_GetTeam_ByID_Result>("spTICK_StatsInc_GetTeam_ByID", iDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_StatsInc_GetTeam_ByStatsIncID_Result> spTICK_StatsInc_GetTeam_ByStatsIncID(Nullable<int> sportID, Nullable<long> statsIncTeamID, Nullable<int> clientID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var statsIncTeamIDParameter = statsIncTeamID.HasValue ?
                new ObjectParameter("StatsIncTeamID", statsIncTeamID) :
                new ObjectParameter("StatsIncTeamID", typeof(long));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_StatsInc_GetTeam_ByStatsIncID_Result>("spTICK_StatsInc_GetTeam_ByStatsIncID", sportIDParameter, statsIncTeamIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Status_GetByID_Result> spTICK_Status_GetByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Status_GetByID_Result>("spTICK_Status_GetByID", iDParameter);
        }
    
        public virtual int spTICK_Status_GetID(Nullable<int> sportID, string description, ObjectParameter statusID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Status_GetID", sportIDParameter, descriptionParameter, statusID);
        }
    
        public virtual ObjectResult<spTICK_Statuses_Get_Result> spTICK_Statuses_Get(Nullable<int> sportID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Statuses_Get_Result>("spTICK_Statuses_Get", sportIDParameter);
        }
    
        public virtual int spTICK_Team_Add(Nullable<int> sportID, Nullable<int> statsIncID, string abbreviation, string cityName, string nickName, string primaryColor, string secondaryColor, Nullable<int> ranking, ObjectParameter teamID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var statsIncIDParameter = statsIncID.HasValue ?
                new ObjectParameter("StatsIncID", statsIncID) :
                new ObjectParameter("StatsIncID", typeof(int));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var primaryColorParameter = primaryColor != null ?
                new ObjectParameter("PrimaryColor", primaryColor) :
                new ObjectParameter("PrimaryColor", typeof(string));
    
            var secondaryColorParameter = secondaryColor != null ?
                new ObjectParameter("SecondaryColor", secondaryColor) :
                new ObjectParameter("SecondaryColor", typeof(string));
    
            var rankingParameter = ranking.HasValue ?
                new ObjectParameter("Ranking", ranking) :
                new ObjectParameter("Ranking", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Team_Add", sportIDParameter, statsIncIDParameter, abbreviationParameter, cityNameParameter, nickNameParameter, primaryColorParameter, secondaryColorParameter, rankingParameter, teamID);
        }
    
        public virtual int spTICK_Team_Delete(Nullable<int> teamID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Team_Delete", teamIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Team_Get_Result> spTICK_Team_Get(Nullable<int> sportID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Team_Get_Result>("spTICK_Team_Get", sportIDParameter);
        }
    
        public virtual int spTICK_Team_Update(Nullable<int> iD, string abbreviation, string cityName, string nickName, Nullable<int> ranking, string primaryColor, string secondaryColor)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var rankingParameter = ranking.HasValue ?
                new ObjectParameter("Ranking", ranking) :
                new ObjectParameter("Ranking", typeof(int));
    
            var primaryColorParameter = primaryColor != null ?
                new ObjectParameter("PrimaryColor", primaryColor) :
                new ObjectParameter("PrimaryColor", typeof(string));
    
            var secondaryColorParameter = secondaryColor != null ?
                new ObjectParameter("SecondaryColor", secondaryColor) :
                new ObjectParameter("SecondaryColor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Team_Update", iDParameter, abbreviationParameter, cityNameParameter, nickNameParameter, rankingParameter, primaryColorParameter, secondaryColorParameter);
        }
    
        public virtual ObjectResult<spTICK_Teams_Get_ByClientID_Result> spTICK_Teams_Get_ByClientID(Nullable<int> sportID, Nullable<int> clientID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Teams_Get_ByClientID_Result>("spTICK_Teams_Get_ByClientID", sportIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_TickerFlowFiles_Get_Result> spTICK_TickerFlowFiles_Get(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_TickerFlowFiles_Get_Result>("spTICK_TickerFlowFiles_Get", clientIdParameter);
        }
    
        public virtual int spTICK_Tools_PopulateSoccerStatuses(Nullable<int> sportID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Tools_PopulateSoccerStatuses", sportIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Users_Get_Result> spTICK_Users_Get(string uname)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("Uname", uname) :
                new ObjectParameter("Uname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Users_Get_Result>("spTICK_Users_Get", unameParameter);
        }
    
        public virtual int spTICK_Web_GameNote_Add(Nullable<int> gameID, Nullable<int> clientID, Nullable<bool> isVisitors, string note, Nullable<int> inGameStatID, Nullable<bool> noTeam)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var isVisitorsParameter = isVisitors.HasValue ?
                new ObjectParameter("IsVisitors", isVisitors) :
                new ObjectParameter("IsVisitors", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var inGameStatIDParameter = inGameStatID.HasValue ?
                new ObjectParameter("InGameStatID", inGameStatID) :
                new ObjectParameter("InGameStatID", typeof(int));
    
            var noTeamParameter = noTeam.HasValue ?
                new ObjectParameter("NoTeam", noTeam) :
                new ObjectParameter("NoTeam", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Web_GameNote_Add", gameIDParameter, clientIDParameter, isVisitorsParameter, noteParameter, inGameStatIDParameter, noTeamParameter);
        }
    
        public virtual int spTICK_Web_GameNote_Add_050412(Nullable<int> gameID, Nullable<int> clientID, Nullable<bool> isVisitors, string note, Nullable<int> inGameStatID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var isVisitorsParameter = isVisitors.HasValue ?
                new ObjectParameter("IsVisitors", isVisitors) :
                new ObjectParameter("IsVisitors", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var inGameStatIDParameter = inGameStatID.HasValue ?
                new ObjectParameter("InGameStatID", inGameStatID) :
                new ObjectParameter("InGameStatID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Web_GameNote_Add_050412", gameIDParameter, clientIDParameter, isVisitorsParameter, noteParameter, inGameStatIDParameter);
        }
    
        public virtual int spTICK_Web_GameNote_Delete(Nullable<long> gameNoteID)
        {
            var gameNoteIDParameter = gameNoteID.HasValue ?
                new ObjectParameter("GameNoteID", gameNoteID) :
                new ObjectParameter("GameNoteID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Web_GameNote_Delete", gameNoteIDParameter);
        }
    
        public virtual int spTICK_Web_GameNote_Update(Nullable<long> gameNoteID, string note)
        {
            var gameNoteIDParameter = gameNoteID.HasValue ?
                new ObjectParameter("GameNoteID", gameNoteID) :
                new ObjectParameter("GameNoteID", typeof(long));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Web_GameNote_Update", gameNoteIDParameter, noteParameter);
        }
    
        public virtual ObjectResult<spTICK_Web_GameNotes_ByTeam_Result> spTICK_Web_GameNotes_ByTeam(Nullable<int> gameID, Nullable<bool> isVisitors, Nullable<int> clientID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var isVisitorsParameter = isVisitors.HasValue ?
                new ObjectParameter("IsVisitors", isVisitors) :
                new ObjectParameter("IsVisitors", typeof(bool));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Web_GameNotes_ByTeam_Result>("spTICK_Web_GameNotes_ByTeam", gameIDParameter, isVisitorsParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Web_GameNotes_NoTeam_Result> spTICK_Web_GameNotes_NoTeam(Nullable<int> gameID, Nullable<int> clientID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Web_GameNotes_NoTeam_Result>("spTICK_Web_GameNotes_NoTeam", gameIDParameter, clientIDParameter);
        }
    
        public virtual int spTICK_Web_InGamePlayerStat_Add(Nullable<int> gameID, Nullable<int> playerID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var playerIDParameter = playerID.HasValue ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Web_InGamePlayerStat_Add", gameIDParameter, playerIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Web_ScoreAlerts_Result> spTICK_Web_ScoreAlerts(Nullable<int> sportID)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Web_ScoreAlerts_Result>("spTICK_Web_ScoreAlerts", sportIDParameter);
        }
    
        public virtual int update_PlaylistItems_onDataProvider()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_PlaylistItems_onDataProvider");
        }
    }
}
